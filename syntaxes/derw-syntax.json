{
    "fileTypes": ["derw"],
    "name": "Derw",
    "scopeName": "source.derw",
    "patterns": [
        {
            "include": "#import"
        },
        {
            "include": "#module"
        },
        {
            "include": "#debug"
        },
        {
            "include": "#comments"
        },
        {
            "match": "\\b(_)\\b",
            "name": "keyword.unused.derw"
        },
        {
            "include": "#type-signature"
        },
        {
            "include": "#type-declaration"
        },
        {
            "include": "#type-alias-declaration"
        },
        {
            "include": "#string-backtick"
        },
        {
            "include": "#string-quote"
        },
        {
            "include": "#char"
        },
        {
            "comment": "Floats are always decimal",
            "match": "\\b([0-9]+\\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\\b",
            "name": "constant.numeric.float.derw"
        },
        {
            "match": "\\b([0-9]+)\\b",
            "name": "constant.numeric.derw"
        },
        {
            "match": "\\b(0x[0-9a-fA-F]+)\\b",
            "name": "constant.numeric.derw"
        },
        {
            "include": "#record-prefix"
        },
        {
            "include": "#module-prefix"
        },
        {
            "include": "#constructor"
        },
        {
            "name": "meta.record.field.update.derw",
            "match": "(\\{)\\s+([a-z][a-zA-Z0-9_]*)\\s+(\\|)\\s+([a-z][a-zA-Z0-9_]*)",
            "captures": {
                "1": {
                    "name": "punctuation.bracket.derw"
                },
                "2": {
                    "name": "record.name.derw"
                },
                "3": {
                    "name": "keyword.pipe.derw"
                },
                "4": {
                    "name": "entity.name.record.field.derw"
                }
            }
        },
        {
            "name": "meta.record.field.update.derw",
            "match": "(\\|)\\s+([a-z][a-zA-Z0-9_]*)\\s+(\\=)",
            "captures": {
                "1": {
                    "name": "keyword.pipe.derw"
                },
                "2": {
                    "name": "entity.name.record.field.derw"
                },
                "3": {
                    "name": "keyword.operator.assignment.derw"
                }
            }
        },
        {
            "name": "meta.record.field.update.derw",
            "match": "(\\{)\\s+([a-z][a-zA-Z0-9_]*)\\s+$",
            "captures": {
                "1": {
                    "name": "punctuation.bracket.derw"
                },
                "2": {
                    "name": "record.name.derw"
                }
            }
        },
        {
            "name": "meta.record.field.derw",
            "match": "(\\{)\\s+([a-z][a-zA-Z0-9_]*)\\s+(\\=)",
            "captures": {
                "1": {
                    "name": "punctuation.bracket.derw"
                },
                "2": {
                    "name": "entity.name.record.field.derw"
                },
                "3": {
                    "name": "keyword.operator.assignment.derw"
                }
            }
        },
        {
            "name": "meta.record.field.derw",
            "match": "(,)\\s+([a-z][a-zA-Z0-9_]*)\\s+(\\=)",
            "captures": {
                "1": {
                    "name": "punctuation.separator.comma.derw"
                },
                "2": {
                    "name": "entity.name.record.field.derw"
                },
                "3": {
                    "name": "keyword.operator.assignment.derw"
                }
            }
        },
        {
            "match": "(\\}|\\{)",
            "name": "punctuation.bracket.derw"
        },
        {
            "include": "#unit"
        },
        {
            "include": "#comma"
        },
        {
            "include": "#parens"
        },
        {
            "match": "(->)",
            "name": "keyword.operator.arrow.derw"
        },
        {
            "include": "#infix_op"
        },
        {
            "match": "(\\:|\\||\\\\|!|!=)",
            "name": "keyword.other.derw"
        },
        {
            "match": "\\b(type|as|port|exposing|alias|infixl|infixr|infix)\\s+",
            "name": "keyword.other.derw"
        },
        {
            "match": "\\b(if|then|else|case|of|let|in|do|return)\\s+",
            "name": "keyword.control.derw"
        },
        {
            "include": "#record-accessor"
        },
        {
            "include": "#top_level_value"
        },
        {
            "include": "#value"
        },
        {
            "include": "#period"
        },
        {
            "include": "#square_brackets"
        }
    ],
    "repository": {
        "comma": {
            "match": "(,)",
            "name": "punctuation.separator.comma.derw"
        },
        "parens": {
            "match": "(\\(|\\))",
            "name": "punctuation.parens.derw"
        },
        "block_comment": {
            "applyEndPatternLast": 1,
            "begin": "\\{-(?!#)",
            "captures": {
                "0": {
                    "name": "punctuation.definition.comment.derw"
                }
            },
            "end": "-\\}",
            "name": "comment.block.derw",
            "patterns": [
                {
                    "include": "#block_comment"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.derw"
                        }
                    },
                    "begin": "--",
                    "end": "$",
                    "name": "comment.line.double-dash.derw"
                },
                {
                    "include": "#block_comment"
                }
            ]
        },
        "import": {
            "name": "meta.import.derw",
            "begin": "^\\b(import)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.import.derw"
                }
            },
            "end": "\\n(?!\\s)",
            "patterns": [
                {
                    "match": "(as|exposing)",
                    "name": "keyword.control.derw"
                },
                {
                    "include": "#module_chunk"
                },
                {
                    "include": "#period"
                },
                {
                    "match": "\\s+",
                    "name": "punctuation.spaces.derw"
                },
                {
                    "include": "#module-exports"
                }
            ]
        },
        "module": {
            "begin": "^\\b((port |effect )?module)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.derw"
                }
            },
            "end": "\\n(?!\\s)",
            "endCaptures": {
                "1": {
                    "name": "keyword.other.derw"
                }
            },
            "name": "meta.declaration.module.derw",
            "patterns": [
                {
                    "include": "#module_chunk"
                },
                {
                    "include": "#period"
                },
                {
                    "match": "(exposing)",
                    "name": "keyword.other.derw"
                },
                {
                    "match": "\\s+",
                    "name": "punctuation.spaces.derw"
                },
                {
                    "include": "#module-exports"
                }
            ]
        },
        "string-backtick": {
            "name": "string.quoted.backtick.derw",
            "begin": "`",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.derw"
                }
            },
            "end": "`",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.derw"
                }
            },
            "patterns": [
                {
                    "match": "\\\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\"'\\&]|x[0-9a-fA-F]{1,5})",
                    "name": "constant.character.escape.derw"
                },
                {
                    "match": "\\^[A-Z@\\[\\]\\\\\\^_]",
                    "name": "constant.character.escape.control.derw"
                }
            ]
        },
        "string-quote": {
            "name": "string.quoted.double.derw",
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.derw"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.derw"
                }
            },
            "patterns": [
                {
                    "match": "\\\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\"'\\&]|x[0-9a-fA-F]{1,5})",
                    "name": "constant.character.escape.derw"
                },
                {
                    "match": "\\^[A-Z@\\[\\]\\\\\\^_]",
                    "name": "constant.character.escape.control.derw"
                }
            ]
        },
        "char": {
            "name": "string.quoted.single.derw",
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.char.begin.derw"
                }
            },
            "end": "'",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.char.end.derw"
                }
            },
            "patterns": [
                {
                    "match": "\\\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\"'\\&]|x[0-9a-fA-F]{1,5})",
                    "name": "constant.character.escape.derw"
                },
                {
                    "match": "\\^[A-Z@\\[\\]\\\\\\^_]",
                    "name": "constant.character.escape.control.derw"
                }
            ]
        },
        "debug": {
            "match": "\\b(Debug)\\b",
            "name": "invalid.illegal.debug.derw"
        },
        "module-exports": {
            "begin": "(\\()",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.parens.module-export.derw"
                }
            },
            "end": "(\\))",
            "endCaptures": {
                "1": {
                    "name": "punctuation.parens.module-export.derw"
                }
            },
            "name": "meta.declaration.exports.derw",
            "patterns": [
                {
                    "match": "\\b[a-z][a-zA-Z_'0-9]*",
                    "name": "entity.name.function.derw"
                },
                {
                    "match": "\\b[A-Z][A-Za-z_'0-9]*",
                    "name": "storage.type.derw"
                },
                {
                    "match": ",",
                    "name": "punctuation.separator.comma.derw"
                },
                {
                    "match": "\\s+",
                    "name": "punctuation.spaces.derw"
                },
                {
                    "include": "#comma"
                },
                {
                    "match": "\\(\\.\\.\\)",
                    "name": "punctuation.parens.ellipses.derw"
                },
                {
                    "match": "\\.\\.",
                    "name": "punctuation.parens.ellipses.derw"
                },
                {
                    "include": "#infix_op"
                },
                {
                    "comment": "So named because I don't know what to call this.",
                    "match": "\\(.*?\\)",
                    "name": "meta.other.unknown.derw"
                }
            ]
        },
        "module_chunk": {
            "match": "[A-Z][a-zA-Z0-9_]*",
            "name": "support.module.derw"
        },
        "period": {
            "match": "[.]",
            "name": "keyword.other.period.derw"
        },
        "square_brackets": {
            "match": "[\\[\\]]",
            "name": "punctuation.definition.list.derw"
        },
        "record-prefix": {
            "match": "([a-z][a-zA-Z0-9_]*)(\\.)([a-z][a-zA-Z0-9_]*)",
            "name": "record.accessor.derw",
            "captures": {
                "1": {
                    "name": "record.name.derw"
                },
                "2": {
                    "name": "keyword.other.period.derw"
                },
                "3": {
                    "name": "entity.name.record.field.accessor.derw"
                }
            }
        },
        "module-prefix": {
            "match": "([A-Z][a-zA-Z0-9_]*)(\\.)",
            "name": "meta.module.name.derw",
            "captures": {
                "1": {
                    "name": "support.module.derw"
                },
                "2": {
                    "name": "keyword.other.period.derw"
                }
            }
        },
        "constructor": {
            "match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
            "name": "constant.type-constructor.derw"
        },
        "value": {
            "match": "\\b[a-z][a-zA-Z0-9_]*\\b",
            "name": "meta.value.derw"
        },
        "unit": {
            "match": "\\(\\)",
            "name": "constant.unit.derw"
        },
        "top_level_value": {
            "match": "^[a-z][a-zA-Z0-9_]*\\b",
            "name": "entity.name.function.top_level.derw"
        },
        "record-accessor": {
            "match": "(\\.)([a-z][a-zA-Z0-9_]*)",
            "name": "meta.record.accessor",
            "captures": {
                "1": {
                    "name": "keyword.other.period.derw"
                },
                "2": {
                    "name": "entity.name.record.field.accessor.derw"
                }
            }
        },
        "infix_op": {
            "match": "(</>|<\\?>|<\\||<=|\\|\\||&&|>=|\\|>|\\|=|\\|\\.|\\+\\+|::|!=|==|!|//|>>|<<|<|>|\\^|\\+|-|/|\\*)",
            "name": "keyword.operator.derw"
        },
        "type-declaration": {
            "begin": "^(type\\s+)([A-Z][a-zA-Z0-9_']*)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "keyword.type.derw"
                },
                "2": {
                    "name": "storage.type.derw"
                }
            },
            "end": "^(?=\\S)",
            "name": "meta.function.type-declaration.derw",
            "patterns": [
                {
                    "name": "meta.record.field.derw",
                    "match": "^\\s*([A-Z][a-zA-Z0-9_]*)\\b",
                    "captures": {
                        "1": {
                            "name": "constant.type-constructor.derw"
                        }
                    }
                },
                {
                    "match": "\\s+",
                    "name": "punctuation.spaces.derw"
                },
                {
                    "name": "meta.record.field.derw",
                    "match": "(\\=|\\|)\\s+([A-Z][a-zA-Z0-9_]*)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.assignment.derw"
                        },
                        "2": {
                            "name": "constant.type-constructor.derw"
                        }
                    }
                },
                {
                    "match": "\\=",
                    "name": "keyword.operator.assignment.derw"
                },
                {
                    "match": "\\-\\>",
                    "name": "keyword.operator.arrow.derw"
                },
                {
                    "include": "#module-prefix"
                },
                {
                    "match": "\\b[a-z][a-zA-Z0-9_]*\\b",
                    "name": "variable.type.derw"
                },
                {
                    "match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
                    "name": "storage.type.derw"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#type-record"
                }
            ]
        },
        "type-alias-declaration": {
            "begin": "^(type\\s+)(alias\\s+)([A-Z][a-zA-Z0-9_']*)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "keyword.type.derw"
                },
                "2": {
                    "name": "keyword.type-alias.derw"
                },
                "3": {
                    "name": "storage.type.derw"
                }
            },
            "end": "^(?=\\S)",
            "name": "meta.function.type-declaration.derw",
            "patterns": [
                {
                    "match": "\\n\\s+",
                    "name": "punctuation.spaces.derw"
                },
                {
                    "match": "\\=",
                    "name": "keyword.operator.assignment.derw"
                },
                {
                    "include": "#module-prefix"
                },
                {
                    "match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
                    "name": "storage.type.derw"
                },
                {
                    "match": "\\b[a-z][a-zA-Z0-9_]*\\b",
                    "name": "variable.type.derw"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#type-record"
                }
            ]
        },
        "type-record": {
            "begin": "(\\{)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.section.braces.begin"
                }
            },
            "end": "(\\})",
            "endCaptures": {
                "1": {
                    "name": "punctuation.section.braces.end"
                }
            },
            "name": "meta.function.type-record.derw",
            "patterns": [
                {
                    "match": "\\s+",
                    "name": "punctuation.spaces.derw"
                },
                {
                    "match": "->",
                    "name": "keyword.operator.arrow.derw"
                },
                {
                    "name": "meta.record.field.derw",
                    "match": "([a-z][a-zA-Z0-9_]*)\\s+(\\:)",
                    "captures": {
                        "1": {
                            "name": "entity.name.record.field.derw"
                        },
                        "2": {
                            "name": "keyword.other.derw"
                        }
                    }
                },
                {
                    "match": "\\,",
                    "name": "punctuation.separator.comma.derw"
                },
                {
                    "include": "#module-prefix"
                },
                {
                    "match": "\\b[a-z][a-zA-Z0-9_]*\\b",
                    "name": "variable.type.derw"
                },
                {
                    "match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
                    "name": "storage.type.derw"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#type-record"
                }
            ]
        },
        "type-signature": {
            "begin": "^(port\\s+)?([a-z_][a-zA-Z0-9_']*)\\s+(\\:)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.port.derw"
                },
                "2": {
                    "name": "entity.name.function.derw"
                },
                "3": {
                    "name": "keyword.other.colon.derw"
                }
            },
            "end": "((^(?=[a-z]))|^$)",
            "name": "meta.function.type-declaration.derw",
            "patterns": [
                {
                    "include": "#type-signature-chunk"
                }
            ]
        },
        "type-signature-chunk": {
            "patterns": [
                {
                    "match": "->",
                    "name": "keyword.operator.arrow.derw"
                },
                {
                    "match": "\\s+",
                    "name": "punctuation.spaces.derw"
                },
                {
                    "include": "#module-prefix"
                },
                {
                    "match": "\\b[a-z][a-zA-Z0-9_]*\\b",
                    "name": "variable.type.derw"
                },
                {
                    "match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
                    "name": "storage.type.derw"
                },
                {
                    "match": "\\(\\)",
                    "name": "constant.unit.derw"
                },
                {
                    "include": "#comma"
                },
                {
                    "include": "#parens"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#type-record"
                }
            ]
        }
    }
}
